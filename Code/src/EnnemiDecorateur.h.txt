#pragma once

#include "Static.h"
#include "Joueur.h"
//#include "SceneManager.h"
class SceneManager;

class EnnemiBase : public Static
{
public:
	EnnemiBase(int _x, int _y, int _h, int _l, std::string textureName, std::map<std::string, sf::Texture>& textDictionnary, bool _mortel, b2World& world);
	virtual void Update(SceneManager& sceneManager, int idEnnemi);

protected:
	virtual ~EnnemiBase() = 0;
	virtual bool CheckCollision(Joueur& j);
	virtual void OnCollisionAction(SceneManager& sceneManager, int idEnnemi);
	bool mortel;	
};

class EnnemiDecorateur : public EnnemiBase {
protected:
	EnnemiBase& e_base;

	EnnemiDecorateur(EnnemiBase& _base, int _x, int _y, int _h, int _l, std::string textureName, std::map<std::string, sf::Texture>& textDictionnary, bool _mortel, b2World& world);
	virtual ~EnnemiDecorateur() = 0;

public:
	EnnemiBase* getBase() const { return &e_base; };
};

class EnDecoMove : public EnnemiDecorateur {
public:
	EnDecoMove(EnnemiBase& _base, int _x, int _y, int _h, int _l, std::string textureName, std::map<std::string, sf::Texture>& textDictionnary, bool _mortel, b2World& world);
	~EnDecoMove();
	void Update(SceneManager& sceneManager, int idEnnemi);

private:
	int xInit;
	int distance;
};

